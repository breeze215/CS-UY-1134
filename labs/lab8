
from ArrayStack import *
import ctypes  # provides low-level arrays
def make_array(n):
    return (n * ctypes.py_object)()

class ArrayList:
    def __init__(self):
        self.data = make_array(1)
        self.capacity = 1
        self.n = 0

    def __len__(self):
        return self.n


    def append(self, val):
        if (self.n == self.capacity):
            self.resize(2 * self.capacity)
        self.data[self.n] = val
        self.n += 1

    def resize(self, new_size):
        new_array = make_array(new_size)
        for i in range(self.n):
            new_array[i] = self.data[i]
        self.data = new_array
        self.capacity = new_size

    def extend(self, iter_collection):
        for elem in iter_collection:
            self.append(elem)


    def __getitem__(self, ind):
        if (not (-self.n <= ind <= self.n - 1)):
            raise IndexError('invalid index')
        if (ind < 0):
            ind = self.n + ind
        return self.data[ind]

    def __setitem__(self, ind, val):
        if (not (-self.n <= ind <= self.n - 1)):
            raise IndexError('invalid index')
        if (ind < 0):
            ind = self.n + ind
        self.data[ind] = val


    def pop(self, ind = -1):
        if (not (-self.n <= ind <= self.n - 1)):
            raise IndexError('invalid index')
        if (ind < 0):
            ind = self.n + ind
        elem = self.data[ind]
        for i in range(ind+1, self.n):
            self.data[i-1] = self.data[i]
        self.data[self.n - 1] = None
        self.n -= 1
        if (self.n < self.capacity // 4):
            self.resize(self.capacity // 2)
        return elem

    def insert(self, ind, value):
        if (not (-self.n <= ind <= self.n - 1)):
            raise IndexError('invalid index')
        if (ind < 0):
            ind = self.n + ind
        if (self.n == self.capacity):
            self.resize(2 * self.capacity)
        for j in range(self.n, ind, -1):
            self.data[j] = self.data[j - 1]
        self.data[ind] = value
        self.n += 1

    def __repr__(self):
        data_as_strings = [str(self.data[i]) for i in range(self.n)]
        return '[' + ', '.join(data_as_strings) + ']'

    def __add__(self, other):
        res = ArrayList()
        res.extend(self)
        res.extend(other)
        return res

    def __iadd__(self, other):
        self.extend(other)
        return self

    def __mul__(self, times):
        res = ArrayList()
        for i in range(times):
            res.extend(self)
        return res

    def __rmul__(self, times):
        return self * times

class ArrayStack:
    def __init__(self):
        self.data = ArrayList()

    def __len__(self):
        return len(self.data)

    def is_empty(self):
        return len(self) == 0

    def push(self, val):
        self.data.append(val)

    def top(self):
        if (self.is_empty()):
            raise Exception("Stack is empty")
        return self.data[-1]

    def pop(self):
        if (self.is_empty()):
            raise Exception("Stack is empty")
        return self.data.pop()
    
def stack_sum(s):
    if len(s)==1:
        return s.top()
    else:
        val=s.pop()
        result=stack_sum(s)
        result+=val
        s.push(val)
        return result

def mystery(lst):
    s = ArrayStack()
    for i in range(len(lst)):
        s.push(lst.pop())
    for i in range(len(s)):
        lst.append(s.pop())
class MeanStack:
    def __init__(self):
        self.data=ArrayStack()
        self.sum=0
    def __len__(self):
        return len(self.data)
    def is_empty(self):
        return len(self)==0
    def push(self,e):
        if type(e)!=int:
            raise TypeError("not integer")
        else:
            self.data.append(e)
            self.sum+=e
    def pop(self):
        if self.is_empty():
            raise Exception("stack is empty")
        self.sum-=self.data[-1]
        return self.data.pop()
    def top(self):
        if self.is_empty():
            raise Exception("Stack is empty")
        return self.data[-1]
    def sum(self):
        return self.sum
    def mean(self):
        return self.sum/len(self)
def flatten_list(lst):
    s=ArrayStack()
    while len(lst)>0:
        if isinstance(lst[-1],list):
            var=lst.pop()
            lst.extend(var)
        else:
            s.push(lst.pop())
    while s.is_empty()==False:
        temp=s.pop()
        lst.append(temp)
