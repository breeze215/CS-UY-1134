class Vector:
    #Q6a
    def __init__(self,d):
        if isinstance(d,int)==True:
            self.coords=[0]*d
        elif isinstance(d,list)==True:
            self.coords=list(d)
    def __len__(self):
        return len(self.coords)
    def __getitem__(self, j):
        return self.coords[j]
    def __setitem__(self, j, val):
        self.coords[j] = val
    def __add__(self, other):
        if (len(self) != len(other)):
            raise ValueError("dimensions must agree")
        result = Vector(len(self))
        for j in range(len(self)):
            result[j] = self[j] + other[j]
        return result
    def __eq__(self, other):
        return self.coords == other.coords
    def __ne__(self, other):
        return not (self == other)
    def __str__(self):
        return '<'+ str(self.coords)[1:-1] + '>'
    def __repr__(self):
        return str(self)
    #Q6b
    def __sub__(self,other):
        if len(self.coords)!=len(other.coords):
            raise ValueError("dimensions must agree")
        result=Vector(len(self))
        for j in range(len(self)):
            result[j]=self[j]-other[j]
        return result
    #Q6c
    def __neg__(self):
        return Vector([(-1*self[i]) for i in range(len(self))])
    #Q6d and Q6f
    def __mul__(self,other):
        if isinstance(other,int)==True:
            return Vector([(self[i]*other) for i in range(len(self))])
        if len(self)!=len(other):
            raise ValueError("dimensions must agree")
        result=0
        for i in range(len(self)):
            result+=(self[i]*other[i])
        return result
    #Q6e
    def __rmul__(self,other):
        return self.__mul__(other)
